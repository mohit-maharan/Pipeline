name: Terraform Azure (Self-hosted, Windows)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: false

env:
  TF_WORKING_DIR: .               # e.g., ./infra
  # Optional: Backend vars if not in code
  # TFSTATE_RG: ms-rg
  # TFSTATE_SA: msstg3
  # TFSTATE_CONTAINER: tfstate
  # TFSTATE_KEY: terraform.tfstate

jobs:
  terraform_deploy:
    name: "Terraform Deploy"
    runs-on: self-hosted   # change labels if your runner differs
    defaults:
      run:
        shell: pwsh
        working-directory: ${{ env.TF_WORKING_DIR }}
    env:
      ARM_USE_OIDC: "true"
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        

      - name: HashiCorp - Setup Terraform
  # You may pin to the exact commit or the version.
  # uses: hashicorp/setup-terraform@633666f66e0061ca3b725c73b2ec20cd13a8fdd1
        uses: hashicorp/setup-terraform@v2.0.3
          with:
                        # The hostname of a Terraform Cloud/Enterprise instance to place within the credentials block of the Terraform CLI configuration file. Defaults to `app.terraform.io`.
        cli_config_credentials_hostname: # optional, default is app.terraform.io
                        # The API token for a Terraform Cloud/Enterprise instance to place within the credentials block of the Terraform CLI configuration file.
        cli_config_credentials_token: # optional
                        # The version of Terraform CLI to install. Instead of full version string you can also specify constraint string starting with "<" (for example `<1.13.0`) to install the latest version satisfying the constraint. A value of `latest` will install the latest version of Terraform CLI. Defaults to `latest`.
        terraform_version: # optional, default is latest
                        # Whether or not to install a wrapper to wrap subsequent calls of the `terraform` binary and expose its STDOUT, STDERR, and exit code as outputs named `stdout`, `stderr`, and `exitcode` respectively. Defaults to `true`.
         terraform_wrapper: # optional, default is true
                              

      - name: Verify context
        run: |
          Write-Host "PWD: $(Get-Location)"
          terraform -version
          az account show --output table

      - name: Terraform Fmt
        run: terraform fmt -check -no-color

      - name: Terraform Init
        run: |
          # If backend is defined in code, simple init:
          terraform init -input=false
          # If backend not in code, uncomment and set:
          # terraform init -input=false `
          #   -backend-config="resource_group_name=${{ env.TFSTATE_RG }}" `
          #   -backend-config="storage_account_name=${{ env.TFSTATE_SA }}" `
          #   -backend-config="container_name=${{ env.TFSTATE_CONTAINER }}" `
          #   -backend-config="key=${{ env.TFSTATE_KEY }}"

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan (detailed exit)
        id: plan
        run: |
          $ErrorActionPreference = "Stop"
          terraform plan -input=false -no-color -out=tfplan -detailed-exitcode
          $ec = $LASTEXITCODE
          "plan_exit_code=$ec" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          if ($ec -eq 2) {
            Write-Host "Changes detected"
          } elseif ($ec -eq 0) {
            Write-Host "No changes"
          } else {
            throw "Plan failed with exit code $ec"
          }

      - name: Terraform Show
        if: steps.plan.outputs.plan_exit_code == '2'
        run: terraform show -no-color tfplan

      - name: Terraform Apply
        if: steps.plan.outputs.plan_exit_code == '2' && github.ref == 'refs/heads/main'
        run: terraform apply -input=false -auto-approve tfplan
