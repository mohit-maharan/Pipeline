name: Simple Terraform Azure Deployment

on: 
  # Trigger the workflow on pushes to the main branch.
  push: 
    branches: 
      - main
  # Allow the workflow to be manually triggered from the GitHub Actions UI.
  workflow_dispatch: 

# Define permissions required for the workflow.
permissions:
  id-token: write
  contents: read

jobs:
  terraform_deploy:
    # The name of the job, which will appear in the GitHub Actions UI.
    name: "Terraform Deploy"
    # Specify the type of runner to use. This is set to self-hosted as requested.
    runs-on: self-hosted
    # This job will run on every push event.
    steps:
      - name: "Checkout Repository"
        # Use the official actions/checkout action to check out the code.
        uses: actions/checkout@v4
      
      - name: "Azure Login"
        # Use the official azure/login action to authenticate with Azure via OIDC.
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: "Setup Terraform"
        # Use the HashiCorp setup-terraform action to install Terraform.
        uses: hashicorp/setup-terraform@v3.1.2

      - name: "Terraform Init"
        id: init
        # The `terraform init` command initializes the working directory.
        run: terraform init -backend-config="resource_group_name=ms-rg" -backend-config="storage_account_name=msstg3" -backend-config="container_name=tfstate" -backend-config="key=terraform.tfstate"

      - name: "Terraform Plan"
        id: plan
        # The `terraform plan` command creates an execution plan.
        run: terraform plan

      - name: "Terraform Apply"
        id: apply
        # The `terraform apply` command executes the changes. `-auto-approve` confirms them automatically.
        run: terraform apply -auto-approve